/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.hardware.graphics.composer@2.1;

/* Return codes from all functions. */
enum Error : int32_t {
    NONE            = 0, /* no error */
    BAD_CONFIG      = 1, /* invalid Config */
    BAD_DISPLAY     = 2, /* invalid Display */
    BAD_LAYER       = 3, /* invalid Layer */
    BAD_PARAMETER   = 4, /* invalid width, height, etc. */
    HAS_CHANGES     = 5,
    NO_RESOURCES    = 6, /* temporary failure due to resource contention */
    NOT_VALIDATED   = 7, /* validateDisplay has not been called */
    UNSUPPORTED     = 8, /* permanent failure */
};

typedef uint32_t Config;
typedef uint64_t Display;
typedef uint64_t Layer;

/*
 * Copied from android_transform_t
 *
 * TODO(olv) copy comments over and generate android_transform_t
 */
enum Transform : int32_t {
    FLIP_H    = 0x1,
    FLIP_V    = 0x2,
    ROT_90    = 0x4,
    ROT_180   = 0x3,
    ROT_270   = 0x7,
    RESERVED  = 0x8,
};

/*
 * Copied from android_color_mode_t
 *
 * TODO(olv) copy comments over and generate android_color_mode_t
 */
enum ColorMode : int32_t {
  NATIVE                        = 0,
  STANDARD_BT601_625            = 1,
  STANDARD_BT601_625_UNADJUSTED = 2,
  STANDARD_BT601_525            = 3,
  STANDARD_BT601_525_UNADJUSTED = 4,
  STANDARD_BT709                = 5,
  DCI_P3                        = 6,
  SRGB                          = 7,
  ADOBE_RGB                     = 8,
};

/*
 * Copied from android_color_transform_t
 *
 * TODO(olv) copy comments over and generate android_color_transform_t
 */
enum ColorTransform : int32_t {
    IDENTITY             = 0,
    ARBITRARY_MATRIX     = 1,
    VALUE_INVERSE        = 2,
    GRAYSCALE            = 3,
    CORRECT_PROTANOPIA   = 4,
    CORRECT_DEUTERANOPIA = 5,
    CORRECT_TRITANOPIA   = 6
};

/*
 * Copied from android_dataspace_t
 *
 * TODO(olv) copy comments over and generate android_dataspace_t
 */
enum Dataspace : int32_t {
    UNKNOWN                            = 0x0,
    ARBITRARY                          = 0x1,

    STANDARD_SHIFT                     = 16,
    STANDARD_MASK                      = 63 << STANDARD_SHIFT,
    STANDARD_UNSPECIFIED               = 0 << STANDARD_SHIFT,
    STANDARD_BT709                     = 1 << STANDARD_SHIFT,
    STANDARD_BT601_625                 = 2 << STANDARD_SHIFT,
    STANDARD_BT601_625_UNADJUSTED      = 3 << STANDARD_SHIFT,
    STANDARD_BT601_525                 = 4 << STANDARD_SHIFT,
    STANDARD_BT601_525_UNADJUSTED      = 5 << STANDARD_SHIFT,
    STANDARD_BT2020                    = 6 << STANDARD_SHIFT,
    STANDARD_BT2020_CONSTANT_LUMINANCE = 7 << STANDARD_SHIFT,
    STANDARD_BT470M                    = 8 << STANDARD_SHIFT,
    STANDARD_FILM                      = 9 << STANDARD_SHIFT,

    TRANSFER_SHIFT                     = 22,
    TRANSFER_MASK                      = 31 << TRANSFER_SHIFT,
    TRANSFER_UNSPECIFIED               = 0 << TRANSFER_SHIFT,
    TRANSFER_LINEAR                    = 1 << TRANSFER_SHIFT,
    TRANSFER_SRGB                      = 2 << TRANSFER_SHIFT,
    TRANSFER_SMPTE_170M                = 3 << TRANSFER_SHIFT,
    TRANSFER_GAMMA2_2                  = 4 << TRANSFER_SHIFT,
    TRANSFER_GAMMA2_8                  = 5 << TRANSFER_SHIFT,
    TRANSFER_ST2084                    = 6 << TRANSFER_SHIFT,
    TRANSFER_HLG                       = 7 << TRANSFER_SHIFT,

    RANGE_SHIFT                        = 27,
    RANGE_MASK                         = 7 << RANGE_SHIFT,
    RANGE_UNSPECIFIED                  = 0 << RANGE_SHIFT,
    RANGE_FULL                         = 1 << RANGE_SHIFT,
    RANGE_LIMITED                      = 2 << RANGE_SHIFT,

    SRGB_LINEAR                        = 0x200,
    V0_SRGB_LINEAR                     = STANDARD_BT709 |
                                         TRANSFER_LINEAR |
                                         RANGE_FULL,

    SRGB                               = 0x201,
    V0_SRGB                            = STANDARD_BT709 |
                                         TRANSFER_SRGB |
                                         RANGE_FULL,

    JFIF                               = 0x101,
    V0_JFIF                            = STANDARD_BT601_625 |
                                         TRANSFER_SMPTE_170M |
                                         RANGE_FULL,

    BT601_625                          = 0x102,
    V0_BT601_625                       = STANDARD_BT601_625 |
                                         TRANSFER_SMPTE_170M |
                                         RANGE_LIMITED,

    BT601_525                          = 0x103,
    V0_BT601_525                       = STANDARD_BT601_525 |
                                         TRANSFER_SMPTE_170M |
                                         RANGE_LIMITED,

    BT709                              = 0x104,
    V0_BT709                           = STANDARD_BT709 |
                                         TRANSFER_SMPTE_170M |
                                         RANGE_LIMITED,

    DEPTH                              = 0x1000,
};

/*
 * Copied from android_hdr_t
 *
 * TODO(olv) copy comments over and generate android_hdr_t
 */
enum Hdr : int32_t {
    DOLBY_VISION = 1,
    HDR10        = 2,
    HLG          = 3,
};

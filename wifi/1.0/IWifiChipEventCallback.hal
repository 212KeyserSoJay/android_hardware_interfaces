/*
 * Copyright 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.hardware.wifi@1.0;

interface IWifiChipEventCallback {
  /**
   * Callback indicating that the chip has been reconfigured successfully. At
   * this point the interfaces available in the mode must be able to be
   * configured. When this is called any previous interface indexes will be
   * considered invalid.
   *
   * @param modeId The mode that the chip switched to, corresponding to the id
   *        property of the target ChipMode.
   */
  oneway onChipReconfigured(ChipModeId modeId);

  /**
   * If this happens then the chips is now in an undefined state and
   * configureChip must be called again. Any interface indexes will be
   * assumed to be invalid.
   *
   * @param modeId The mode that the chip failed switched to, corresponding to
   *        the id property of the target ChipMode.
   * @param reason Failure reason code.
   */
  oneway onChipReconfigureFailure(ChipModeId modeId, FailureReason reason);

  /**
   * Information about the version of the driver and firmware running this chip.
   *
   * This information is vendor specific and does not need to take any
   * particular format. It will be dumped as part of the bug report.
   */
  struct ChipDebugInfo {
    string driverDescription;
    string firmwareDescription;
  };

  /**
   * Callback with debug information about this chip
   *
   * @param info Instance of |ChipDebugInfo|.
   */
  oneway onChipDebugInfoAvailable(ChipDebugInfo info);

  /**
   * Callback to be invoked on failure to fetch debug info about this chip.
   *
   * @param reason Failure reason code.
   */
  oneway onChipDebugInfoFailure(FailureReason reason);

  /**
   * Callback with a vendor specific debug blob from the driver.
   * This blob will be dumped as part of the bug report.
   *
   * @param blob Vector of bytes retrieved from the driver.
   */
  oneway onDriverDebugDumpAvailable(vec<uint8_t> blob);

  /**
   * Callback to be invoked on failure to fetch debug blob from driver.
   *
   * @param reason Failure reason code.
   */
  oneway onDriverDebugDumpFailure(FailureReason reason);

  /**
   * Callback with a vendor specific debug blob from the driver.
   * This blob will be dumped as part of the bug report.
   *
   * @param blob Vector of bytes retrieved from the driver.
   */
  oneway onFirmwareDebugDumpAvailable(vec<uint8_t> blob);

  /**
   * Callback to be invoked on failure to fetch debug blob from driver.
   *
   * @param reason Failure reason code.
   */
  oneway onFirmwareDebugDumpFailure(FailureReason reason);
};

/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.hardware.radio@1.3;

import @1.0::RegState;
import @1.2::AccessNetwork;
import @1.2::CellIdentity;
import @1.2::DataRegStateResult;

enum AccessNetwork : @1.2::AccessNetwork {
    /**
     * Unknown access network
     */
    UNKNOWN = 0,
};

/**
 * Emergency number contains information of number, one or more service category(s), and mobile
 * country code (mcc).
 *
 * If the source of the emergency number is associated with country, field ‘mcc’ must be
 * provided; otherwise the field ‘mcc’ must be an empty string.
 *
 * A unique EmergencyNumber has a unique combination of ‘number’ and ‘mcc’ fields.
 * Multiple @1.3::EmergencyServiceCategory should be merged into the bitfield for the same
 * EmergencyNumber.
 *
 * Reference: 3GPP TS 22.101 version 9.1.0 Release 9
 */
struct EmergencyNumber{
    /**
     * The emergency number. The character in the number string should only be the dial pad
     * character('0'-'9', '*', or '#'). For example: 911.
     */
    string number;
    /**
     * 3-digit Mobile Country Code, 0..999. Empty string if not applicable.
     */
    string mcc;
    /**
     * The bitfield of @1.3::EmergencyServiceCategory(s). See @1.3::EmergencyServiceCategory for
     * the value of each bit.
     */
    bitfield<EmergencyServiceCategory> categories;
};

/**
 * Defining Emergency Service Category as follows:
 * - General emergency call, all categories;
 * - Police;
 * - Ambulance;
 * - Fire Brigade;
 * - Marine Guard;
 * - Mountain Rescue;
 * - Manually Initiated eCall (MIeC);
 * - Automatically Initiated eCall (AIeC);
 *
 * Type GENERIC (General emergency call, all categories) is considered to use if the reported type
 * is not any of the other specific types.
 *
 * Reference: 3GPP TS 22.101 version 9.1.0 Release 9
 */
enum EmergencyServiceCategory : int32_t {
    GENERIC = 0, // General emergency call, all categories
    POLICE = 1 << 0,
    AMBULANCE = 1 << 1,
    FIRE_BRIGADE = 1 << 2,
    MARINE_GUARD = 1 << 3,
    MOUNTAIN_RESCUE = 1 << 4,
    MIEC = 1 << 5, // Manually Initiated eCall (MIeC)
    AIEC = 1 << 6, // Automatically Initiated eCall (AIeC)
};

/**
 * Type to define the LTE specific network capabilities for voice over PS including
 * emergency and normal voice calls.
 */
struct LteVopsInfo {
    /**
     * This indicates if camped network support VoLTE services. This information is received
     * from LTE network during LTE NAS registration procedure through LTE ATTACH ACCEPT/TAU
     * ACCEPT. Refer 3GPP 24.301 EPS network feature support -> IMS VoPS
     */
    bool isVopsSupported;
    /**
     * This indicates if camped network support VoLTE emergency bearers. This information
     * is received from LTE network through two sources:
     * a. During LTE NAS registration procedure through LTE ATTACH ACCEPT/TAU ACCEPT. Refer
     *    3GPP 24.301 EPS network feature support -> EMC BS
     * b. In case device is not registered on network. Refer 3GPP 25.331 LTE RRC
     *    SIB1 : ims-EmergencySupport-r9
     * If device is registered on LTE, then this field indicates (a).
     * In case of limited service on LTE this field indicates (b).
     */
    bool isEmcBearerSupported;
};

struct DataRegStateResult {
    @1.2::DataRegStateResult base;
    /**
     * Network capabilities for voice over PS services. This info is valid only
     * on LTE network and must be present when device is camped on LTE. vopsInfo
     * will be empty when device is camped only on 2G/3G .
     */
    safe_union VopsInfo {
        LteVopsInfo lteVopsInfo; // LTE network capability
    } vopsInfo;
};

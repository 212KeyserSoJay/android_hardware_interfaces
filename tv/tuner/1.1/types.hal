/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.hardware.tv.tuner@1.1;

import @1.0::Constant;
import @1.0::DemuxFilterMmtpRecordEvent;
import @1.0::DemuxFilterTsRecordEvent;
import @1.0::FrontendDvbcSpectralInversion;
import @1.0::FrontendDvbtConstellation;
import @1.0::FrontendDvbtTransmissionMode;
import @1.0::FrontendType;
import android.hidl.safe_union@1.0;
import android.hidl.safe_union@1.0::Monostate;

@export
enum Constant : @1.0::Constant {
    /**
     * An invalid mpuSequenceNumber in DemuxFilterMmtpRecordEvent.
     */
    INVALID_MMTP_RECORD_EVENT_MPT_SEQUENCE_NUM = 0xFFFFFFFF,
    /**
     * An invalid frenquency that can be used as the default value of the frontend setting.
     */
    INVALID_FRONTEND_SETTING_FREQUENCY = 0xFFFFFFFF,
    /**
     * An invalid context id that can be used as the default value of the unconfigured id. It can
     * be used to reset the configured ip context id.
     */
    INVALID_IP_FILTER_CONTEXT_ID = 0xFFFFFFFF,
};

@export
enum Constant64Bit : uint64_t {
    /**
     * An invalid 64-bit Filter ID.
     */
    INVALID_FILTER_ID_64BIT = 0xFFFFFFFFFFFFFFFF,
    /**
     * An invalid 64-bit AV sync hardware ID.
     */
    INVALID_AV_SYNC_ID_64BIT = 0xFFFFFFFFFFFFFFFF,
    /**
     * An invalid pts in the DemuxFilterTsRecordEvent or DemuxFilterMmtpRecordEvent.
     */
    INVALID_PRESENTATION_TIME_STAMP = 0xFFFFFFFFFFFFFFFF,
};

/**
 * Extended Demux Filter Record Event.
 */
struct DemuxFilterRecordEventExt {
    /**
     * The Presentation Time Stamp(PTS) for the audio or video frame. It is based on 90KHz
     * and has the same format as the PTS in ISO/IEC 13818-1. It is used only for the SC and
     * the SC_HEVC.
     */
    uint64_t pts;

    /**
     * MPU sequence number of the filtered data. This is only used for MMTP.
     */
    uint32_t mpuSequenceNumber;
};

/**
 * Extended Demux Filter Event.
 */
struct DemuxFilterEventExt {
    safe_union Event {
        /**
         * No extended record filter Event. This is used by the tsRecord or mmtpRecord filter event
         * that does not contain the DemuxFilterRecordEventExt information.
         */
        Monostate noinit;

        DemuxFilterRecordEventExt tsRecord;

        DemuxFilterRecordEventExt mmtpRecord;
    };

    /**
     * An array of events
     */
    vec<Event> events;
};

typedef FrontendDvbcSpectralInversion FrontendSpectralInversion;

/**
 *  Scan type for a DVBS Frontend.
 */
@export
enum FrontendDvbsScanType : uint32_t {
    UNDEFINED = 0,
    DIRECT,
    DISEQC,
    UNICABLE,
    JESS,
};

/**
 * AFT flag for an Analog Frontend.
 */
@export
enum FrontendAnalogAftFlag : uint32_t {
    UNDEFINED,
    AFT_TRUE,
    AFT_FALSE,
};

/**
 *  Extended Transmission Mode for DVBT.
 */
@export
enum FrontendDvbtTransmissionMode : @1.0::FrontendDvbtTransmissionMode {
    MODE_8K_E = 1 << 7,
    MODE_16K_E = 1 << 8,
    MODE_32K_E = 1 << 9,
};

/**
 *  Extended Constellation for DVBT.
 */
@export
enum FrontendDvbtConstellation : @1.0::FrontendDvbtConstellation {
    CONSTELLATION_QPSK_R = 1 << 5,
    CONSTELLATION_16QAM_R = 1 << 6,
    CONSTELLATION_64QAM_R = 1 << 7,
    CONSTELLATION_256QAM_R = 1 << 8,
};

/**
 *  Extended Signal Settings for a DVBS Frontend.
 */
struct FrontendDvbsSettingsExt1_1 {
    FrontendDvbsScanType scanType;
};

/**
 *  Extended Signal Settings for a DVBT Frontend.
 */
struct FrontendDvbtSettingsExt1_1 {
    FrontendDvbtConstellation constellation;

    FrontendDvbtTransmissionMode transmissionMode;
};

/**
 *  Extended Signal Settings for an Analog Frontend.
 */
struct FrontendAnalogSettingsExt1_1 {
    FrontendAnalogAftFlag aftFlag;
};

/**
 *  Extended Signal Settings for Frontend.
 */
struct FrontendSettingsExt1_1 {
    uint32_t endFrequency;

    FrontendSpectralInversion inversion;

    safe_union SettingsExt {
        Monostate noinit;

        FrontendAnalogSettingsExt1_1 analog;

        FrontendDvbsSettingsExt1_1 dvbs;

        FrontendDvbtSettingsExt1_1 dvbt;

        FrontendDtmbSettings dtmb;
    } settingExt;
};

/**
 *  Extended Frontend Type.
 */
@export
enum FrontendType : @1.0::FrontendType {
    /**
     * DTMB (Digital Terrestrial Multimedia Broadcast) standard.
     */
    DTMB,
};

/**
 *  Bandwidth Type for DTMB.
 */
@export
enum FrontendDtmbBandwidth : uint32_t {
    UNDEFINED = 0,
    /**
     * hardware is able to detect and set Bandwidth automatically
     */
    AUTO = 1 << 0,
    BANDWIDTH_8MHZ = 1 << 1,
    BANDWIDTH_6MHZ = 1 << 2,
};

/**
 *  TimeInterleaveMode Type for DTMB.
 */
@export
enum FrontendDtmbTimeInterleaveMode : uint32_t {
    UNDEFINED = 0,
    /**
     * hardware is able to detect and set time interleave mode automatically
     */
    AUTO = 1 << 0,
    TIMER_INT_240 = 1 << 1,
    TIMER_INT_720 = 1 << 2,
};

/**
 *  FrontendDtmbModulation Type for DTMB.
 */
@export
enum FrontendDtmbModulation : uint32_t {
    UNDEFINED = 0,
    /**
     * hardware is able to detect and set Constellation automatically
     */
    AUTO = 1 << 0,
    CONSTELLATION_4QAM = 1 << 1,
    CONSTELLATION_4QAM_NR = 1 << 2,
    CONSTELLATION_16QAM = 1 << 3,
    CONSTELLATION_32QAM = 1 << 4,
    CONSTELLATION_64QAM = 1 << 5,
};

/**
 *  CODERATE Type for DTMB.
 */
@export
enum FrontendDtmbCodeRate : uint32_t {
    UNDEFINED = 0,
    /**
     * hardware is able to detect and set code rate automatically
     */
    AUTO = 1 << 0,
    CODERATE_2_5 = 1 << 1,
    CODERATE_3_5 = 1 << 2,
    CODERATE_4_5 = 1 << 3,
};

/**
 *  Guard Interval Type for DTMB.
 */
@export
enum FrontendDtmbGuardInterval : uint32_t {
    UNDEFINED = 0,
    /**
     * hardware is able to detect and set Guard Interval automatically
     */
    AUTO = 1 << 0,
    PN_420_VARIOUS = 1 << 1,
    PN_595_CONST = 1 << 2,
    PN_945_VARIOUS = 1 << 3,
    PN_420_CONST = 1 << 4,
    PN_945_CONST = 1 << 5,
    PN_RESERVED = 1 << 6,
};

/**
 *  Transmission Mode for DTMB.
 */
@export
enum FrontendDtmbTransmissionMode : uint32_t {
    UNDEFINED = 0,
    /**
     * hardware is able to detect and set Transmission Mode automatically
     */
    AUTO = 1 << 0,
    C1 = 1 << 1,
    C3780 = 1 << 2,
};

/**
 *  Signal Setting for DTMB Frontend.
 */
struct FrontendDtmbSettings {
    uint32_t frequency;

    FrontendDtmbTransmissionMode transmissionMode;

    FrontendDtmbBandwidth bandwidth;

    FrontendDtmbModulation modulation;

    FrontendDtmbCodeRate codeRate;

    FrontendDtmbGuardInterval guardInterval;

    FrontendDtmbTimeInterleaveMode interleaveMode;
};

/**
 *  Capabilities for DTMB Frontend.
 */
struct FrontendDtmbCapabilities {
    bitfield<FrontendDtmbTransmissionMode> transmissionModeCap;

    bitfield<FrontendDtmbBandwidth> bandwidthCap;

    bitfield<FrontendDtmbModulation> modulationCap;

    bitfield<FrontendDtmbCodeRate> codeRateCap;

    bitfield<FrontendDtmbGuardInterval> guardIntervalCap;

    bitfield<FrontendDtmbTimeInterleaveMode> interleaveModeCap;
};
